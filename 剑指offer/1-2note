### 赋值运算符函数

```cpp
class CMyString {
	public:
		CMyString(char* pData = NULL);
		CMyString(const CMyString& str);
		~CMyString(void);

		CMyString& operator =(const CMyString &str);

	private:
		char* m_pData;
};
```

赋值运算符函数的目的在于将另一个对象拷贝到当前对象中，值得注意的点包括

- 深拷贝和浅拷贝
- 内存分配

**基于深拷贝和浅拷贝：**

如果只是简单的将拷贝对象的值赋值到被拷贝对象中，那么两个对象的指针指向同一块内存，内存释放时容易发生多次释放而导致出问题，对此选择的方式是深拷贝，也就是将当前对象原来的值释放，重新分配一块新的内存。

同时需要注意，如果两个实例是同一个的话，直接返回实例就好，否则释放之后再进行拷贝会因为找不到实例的值而出错。

```cpp
// 深拷贝
CMyString& CMyString::operator =(const CMyString &str) {
	if (this == &str)
		return *this;
	delete []m_pData; // 释放当前内存时注意判断两个实例是不是同一个
	m_pData = NULL;

	m_pData = new char[strlen(str.m_pData) + 1];
	strcpy(m_pData, str.m_pData);

	return *this;
}
```

**关于内存分配：**

上面函数欠缺部分在于异常处理，如果new失败会造成不好的后果，因此可以考虑另一种方案，创建一个临时实例，和当前变量交换即可。临时实例创建在栈中，局部函数结束时会自动释放。

```cpp
if (*this != &str) {
		CMyString strTemp(str);
		char *pTemp = strTemp.m_pData;
		strTemp.m_pData = m_pData;
		m_pData = pTemp;
	}
	return *this;
```



### 单例模式

顾名思义，单例模式就是只提供一个类的实例。

简单来说的需要思考到的要点有：

- 全局只存在一个实例，不能拷贝和赋值
- 有实例时直接返回该实例，没有实例时创建实例
- 创建实例考虑线程安全

**双重锁校验**

两次锁的出现其实都是为了确保线程安全，

**只有确保实例为空**时，我们才需要加锁创立新的实例，

加完第一次锁之后，可能**其它线程已经创建实例**，此时需要再次进行判断，判断为空后就可以创建实例。

```cpp
class Singleton {
	private:
		static volatile Singleton* instance;
		static std::mutex mtx;
		Singleton() {}

	public:
        Singleton(Singleton&) = delete;
        Singleton& operator=(const Singleton&) = delete;
  
		static Singleton* getInstance() {
			if (instance == nullptr) {
				std::lock_guard<std::mutex> lock(mtx);
				if (instance == nullptr) {
					instance = new Singleton();
				}
			}
			return const_cast<Singleton*>(instance);
		}
};

volatile Singleton* Singleton::instance = nullptr;
std::mutex Singleton::mtx;
```

**静态局部变量**

由于static只会在同一个地方分配内存，并且即使在局部函数中创建它的作用域也是在全局，利用这种特性，同样可以实现单例。

并且巧妙的利用了c++11中的一个特性：**magic static**

> 变量初始化时进入声明，并发线程会阻塞等待初始化结束。

因此

```cpp
class Singleton {
	private:
		Singleton() {};

	public:
		~Singleton() {};
		Singleton(Singleton&) = delete;
		Singleton& operator=(const Singleton&) = delete;
    
		static Singleton& get_instance() {
			static Singleton instance;
			return instance;
		}
};

int main() {
	Singleton& instance_1 = Singleton::get_instance();
	Singleton& instance_2 = Singleton::get_instance();

	return 0;
}
```

注意使用时也需要采用&的方式。



### 参考资料：

1.剑指offer

2.[c++单例模式总结剖析](https://www.cnblogs.com/sunchaothu/p/10389842.html)
